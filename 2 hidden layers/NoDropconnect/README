***** This model is free of any drop connect (sparsity) implementations *****

Python code
- Python code for the FFNN implemented using tensorflow with 2 hidden layers is present. The name itself is quite intuitive, i.e. for 2 hidden layers the code name is 2HiddenLayers.py
  Such a network will generally be called a 3 Layer network, i.e. counting in the output layer as well while classifying the size of network.

Performance Comparision
- The values for accuracy over the test and train data set (across the total 150 epochs) is present in the accuracyTest.csv and accuracyTrain.csv respectively.
- Run the plot.py code to generate the graphs corresponding to the values of accuracies.

Hyper parameters used
- Learning rate: 0.03
- Epochs: 150
- Batch size: 100

Run the tensorflow model
- To run the python code, simply execute it with a suitable python version (we used 3.5), without any need of an argument. Please note that some syntaxes might not be backward compatible in older releases of python.
- Since the GPU is active, whichever operations are possible are mapped to the NVIDIA GPU (by default) present in the system. You can manually check which operations are performed on CPU/GPU by setting the variable log_device_placement to True in the tensorflow session.
- You might want to run the python command and redirect the output using "&>" to a log file to review it later.
- The code firstly downloads the MNIST data set and perform the classification on the same.
- After the run, you will get some more csv files corresponding to the untrained and trained weights and biases.
- Use (copy) these trained files in the parent folder where you will applying the drop connect algorithm to see the effect of dropping weights and seeing its effect on the accuracy.



